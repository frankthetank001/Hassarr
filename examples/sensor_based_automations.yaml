# Hassarr Sensor-Based Automation Examples
# This file shows how to use the new sensor entities for better Home Assistant integration

# =============================================================================
# SENSOR-BASED AUTOMATIONS (RECOMMENDED APPROACH)
# =============================================================================

# These automations use the new sensor entities that automatically update
# and provide rich attributes for better Home Assistant integration

- alias: "Download Progress Monitor - Sensor Based"
  description: "Monitor download progress using sensor attributes"
  trigger:
    - platform: state
      entity_id: sensor.hassarr_active_downloads
      # Trigger when downloads start or stop
      to: "0"
      from: not "0"
    - platform: state
      entity_id: sensor.hassarr_active_downloads
      # Trigger when downloads start
      to: not "0"
      from: "0"
  condition:
    - condition: template
      value_template: "{{ states('binary_sensor.hassarr_overseerr_online') == 'on' }}"
  action:
    - service: persistent_notification.create
      data:
        title: "Download Status Changed"
        message: |
          {% set active_downloads = states('sensor.hassarr_active_downloads') | int %}
          {% if active_downloads > 0 %}
            üîÑ **Downloads Started**
            
            **Active Downloads:** {{ active_downloads }}
            
            {% set download_details = state_attr('sensor.hassarr_active_downloads', 'download_details') %}
            {% if download_details %}
              **Current Downloads:**
              {% for download in download_details %}
              - **{{ download.title }}** ({{ download.type | title }})
                {% for progress in download.progress %}
                - {{ progress.title }}: {{ progress.progress_percent }}% ({{ progress.time_left }} remaining)
                {% endfor %}
              {% endfor %}
            {% endif %}
          {% else %}
            ‚úÖ **All Downloads Complete**
            
            No active downloads remaining.
          {% endif %}

- alias: "Download Progress Updates - Every 5 Minutes"
  description: "Send progress updates for active downloads"
  trigger:
    - platform: time_pattern
      minutes: "/5"
  condition:
    - condition: and
      conditions:
        - condition: template
          value_template: "{{ states('sensor.hassarr_active_downloads') | int > 0 }}"
        - condition: template
          value_template: "{{ states('binary_sensor.hassarr_overseerr_online') == 'on' }}"
  action:
    - service: persistent_notification.create
      data:
        title: "Download Progress Update"
        message: |
          üìä **Download Progress Report**
          
          **Active Downloads:** {{ states('sensor.hassarr_active_downloads') }}
          **Total Requests:** {{ state_attr('sensor.hassarr_active_downloads', 'total_requests') }}
          
          {% set download_details = state_attr('sensor.hassarr_active_downloads', 'download_details') %}
          {% if download_details %}
            **Current Progress:**
            {% for download in download_details %}
            **{{ download.title }}**
            {% for progress in download.progress %}
            - {{ progress.title }}: {{ progress.progress_percent }}% ({{ progress.time_left }} remaining)
            {% endfor %}
            {% endfor %}
          {% endif %}

- alias: "Overseerr Connection Monitor"
  description: "Monitor Overseerr connection status"
  trigger:
    - platform: state
      entity_id: binary_sensor.hassarr_overseerr_online
  action:
    - service: persistent_notification.create
      data:
        title: "Overseerr Connection Status"
        message: |
          {% if is_state('binary_sensor.hassarr_overseerr_online', 'on') %}
            ‚úÖ **Overseerr Online**
            
            Connection restored successfully.
          {% else %}
            ‚ùå **Overseerr Offline**
            
            Connection lost. Check server status and network connectivity.
          {% endif %}

- alias: "Queue Status Dashboard"
  description: "Update dashboard with queue status"
  trigger:
    - platform: state
      entity_id: sensor.hassarr_download_queue_status
  action:
    - service: input_text.set_value
      data:
        entity_id: input_text.queue_status_dashboard
        value: |
          Queue: {{ states('sensor.hassarr_download_queue_status') }}
          Active: {{ states('sensor.hassarr_active_downloads') }}
          Online: {{ states('binary_sensor.hassarr_overseerr_online') }}

# =============================================================================
# CONDITIONAL AUTOMATIONS USING SENSOR ATTRIBUTES
# =============================================================================

- alias: "Smart Download Notifications"
  description: "Send smart notifications based on download state"
  trigger:
    - platform: state
      entity_id: sensor.hassarr_active_downloads
  condition:
    - condition: template
      value_template: "{{ states('binary_sensor.hassarr_overseerr_online') == 'on' }}"
  action:
    - choose:
        # Downloads started
        - conditions:
            - condition: template
              value_template: "{{ trigger.to_state.state | int > 0 and trigger.from_state.state | int == 0 }}"
          sequence:
            - service: persistent_notification.create
              data:
                title: "Downloads Started"
                message: "{{ trigger.to_state.state }} download(s) have started"
        
        # Downloads completed
        - conditions:
            - condition: template
              value_template: "{{ trigger.to_state.state | int == 0 and trigger.from_state.state | int > 0 }}"
          sequence:
            - service: persistent_notification.create
              data:
                title: "Downloads Completed"
                message: "All downloads have completed"
        
        # Download count changed
        - conditions:
            - condition: template
              value_template: "{{ trigger.to_state.state | int != trigger.from_state.state | int }}"
          sequence:
            - service: persistent_notification.create
              data:
                title: "Download Status Update"
                message: "Active downloads: {{ trigger.to_state.state }}"

# =============================================================================
# ADVANCED SENSOR-BASED AUTOMATIONS
# =============================================================================

- alias: "Download Speed Monitor"
  description: "Monitor download speeds and estimate completion times"
  trigger:
    - platform: time_pattern
      minutes: "/2"
  condition:
    - condition: template
      value_template: "{{ states('sensor.hassarr_active_downloads') | int > 0 }}"
  action:
    - service: persistent_notification.create
      data:
        title: "Download Speed Report"
        message: |
          üöÄ **Download Speed Analysis**
          
          {% set download_details = state_attr('sensor.hassarr_active_downloads', 'download_details') %}
          {% if download_details %}
            {% for download in download_details %}
            **{{ download.title }}**
            {% for progress in download.progress %}
            - {{ progress.title }}: {{ progress.progress_percent }}% complete
              - Size: {{ progress.size_gb }} GB
              - Time remaining: {{ progress.time_left }}
            {% endfor %}
            {% endfor %}
          {% endif %}

- alias: "System Health Check"
  description: "Comprehensive system health check using sensors"
  trigger:
    - platform: time_pattern
      hours: "1"
  action:
    - service: persistent_notification.create
      data:
        title: "Hassarr System Health"
        message: |
          üè• **System Health Report**
          
          **Connection Status:** {{ states('binary_sensor.hassarr_overseerr_online') }}
          **Active Downloads:** {{ states('sensor.hassarr_active_downloads') }}
          **Queue Status:** {{ states('sensor.hassarr_download_queue_status') }}
          **Last Update:** {{ state_attr('sensor.hassarr_active_downloads', 'last_update') }}
          
          {% if is_state('binary_sensor.hassarr_overseerr_online', 'off') %}
            ‚ö†Ô∏è **Warning:** Overseerr is offline
          {% endif %}
          
          {% if states('sensor.hassarr_active_downloads') | int > 5 %}
            ‚ö†Ô∏è **Warning:** High number of active downloads ({{ states('sensor.hassarr_active_downloads') }})
          {% endif %}

# =============================================================================
# DASHBOARD INTEGRATION EXAMPLES
# =============================================================================

- alias: "Dashboard Data Update"
  description: "Update dashboard entities with sensor data"
  trigger:
    - platform: state
      entity_id: 
        - sensor.hassarr_active_downloads
        - sensor.hassarr_download_queue_status
        - binary_sensor.hassarr_overseerr_online
  action:
    - service: input_text.set_value
      data:
        entity_id: input_text.dashboard_summary
        value: |
          Status: {{ states('sensor.hassarr_download_queue_status') }}
          Active: {{ states('sensor.hassarr_active_downloads') }}
          Online: {{ states('binary_sensor.hassarr_overseerr_online') }}

# =============================================================================
# COMPARISON: SERVICE-BASED VS SENSOR-BASED
# =============================================================================

# OLD SERVICE-BASED APPROACH (Less Home Assistant Native)
- alias: "Old Service Based Approach"
  trigger:
    - platform: conversation
      command:
        - "Check downloads"
  action:
    - service: hassarr.get_active_requests
    - service: persistent_notification.create
      data:
        title: "Downloads"
        message: |
          {% set result = state_attr('input_text.last_requests', 'value') %}
          {% if result %}
            {{ result }}
          {% endif %}

# NEW SENSOR-BASED APPROACH (More Home Assistant Native)
- alias: "New Sensor Based Approach"
  trigger:
    - platform: conversation
      command:
        - "Check downloads"
  action:
    - service: persistent_notification.create
      data:
        title: "Downloads"
        message: |
          **Active Downloads:** {{ states('sensor.hassarr_active_downloads') }}
          **Queue Status:** {{ states('sensor.hassarr_download_queue_status') }}
          **Connection:** {{ states('binary_sensor.hassarr_overseerr_online') }}
          
          {% set download_details = state_attr('sensor.hassarr_active_downloads', 'download_details') %}
          {% if download_details %}
            **Current Downloads:**
            {% for download in download_details %}
            - {{ download.title }}: {{ download.downloads }} files
            {% endfor %}
          {% endif %}

# =============================================================================
# HYBRID APPROACH: SENSORS + SERVICES
# =============================================================================

- alias: "Smart Media Status Check"
  description: "Use sensors for basic info, services for detailed queries"
  trigger:
    - platform: conversation
      command:
        - "What's the status of {title}"
  action:
    - choose:
        # Quick status check using sensors
        - conditions:
            - condition: template
              value_template: "{{ states('sensor.hassarr_active_downloads') | int > 0 }}"
          sequence:
            - service: persistent_notification.create
              data:
                title: "Quick Status"
                message: |
                  **{{ trigger.slots.title }}** - Quick Status
                  
                  **System Status:**
                  - Active Downloads: {{ states('sensor.hassarr_active_downloads') }}
                  - Queue: {{ states('sensor.hassarr_download_queue_status') }}
                  - Connection: {{ states('binary_sensor.hassarr_overseerr_online') }}
                  
                  *For detailed status, ask "Check detailed status of {{ trigger.slots.title }}"*
        
        # Detailed status check using service
        - conditions:
            - condition: template
              value_template: "{{ 'detailed' in trigger.slots or 'full' in trigger.slots }}"
          sequence:
            - service: hassarr.check_media_status
              data:
                title: "{{ trigger.slots.title }}"
            - service: persistent_notification.create
              data:
                title: "Detailed Status"
                message: |
                  {% set result = state_attr('input_text.last_status_check', 'value') %}
                  {% if result and result.action == 'found_media' %}
                    **{{ result.primary_result.search_info.title }}**
                    Status: {{ result.primary_result.search_info.status_text }}
                    {% if result.primary_result.search_info.download_info %}
                      Download: {{ result.primary_result.search_info.download_info.current_download.time_left }} remaining
                    {% endif %}
                  {% endif %} 