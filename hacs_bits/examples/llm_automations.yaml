# Hassarr LLM Integration Automation Examples
# This file contains comprehensive examples of how to use the new LLM-focused services

# =============================================================================
# MEDIA STATUS CHECKING AUTOMATIONS
# =============================================================================

- alias: "Check Media Status - Natural Language"
  description: "Check the status of any movie or TV show using natural language"
  trigger:
    - platform: conversation
      command:
        - "What's the status of {title}"
        - "Check status of {title}"
        - "Is {title} downloading"
        - "How is {title} doing"
        - "Status of {title}"
        - "Check {title}"
  action:
    - service: hassarr.check_media_status
      data:
        title: "{{ trigger.slots.title }}"
    - service: persistent_notification.create
      data:
        title: "Media Status Check"
        message: |
          {% set result = state_attr('input_text.last_status_check', 'value') %}
          {% if result %}
            **Status Check Complete**
            
            {% if result.action == 'found_media' %}
              **Title:** {{ result.primary_result.search_info.title }}
              **Type:** {{ result.primary_result.search_info.type | title }}
              **Status:** {{ result.primary_result.search_info.status_text }}
              **Rating:** ⭐ {{ result.primary_result.search_info.rating }}/10
              **Year:** {{ result.primary_result.search_info.release_date[:4] if result.primary_result.search_info.release_date != 'Unknown' else 'Unknown' }}
              
              {% if result.primary_result.search_info.download_info %}
                **Download Progress:**
                - {{ result.primary_result.search_info.download_info.active_downloads }} active download(s)
                - Current: {{ result.primary_result.search_info.download_info.current_download.title }}
                - Time Left: {{ result.primary_result.search_info.download_info.current_download.time_left }}
                - ETA: {{ result.primary_result.search_info.download_info.current_download.estimated_completion }}
              {% endif %}
              
              {% if result.primary_result.search_info.request_details.requested_by != 'Information not available' %}
                **Requested by:** {{ result.primary_result.search_info.request_details.requested_by }}
                **Request date:** {{ result.primary_result.search_info.request_details.request_date }}
              {% endif %}
              
              **Overview:** {{ result.primary_result.content_details.overview[:200] }}{% if result.primary_result.content_details.overview|length > 200 %}...{% endif %}
              
            {% elif result.action == 'not_found' %}
              ❌ **No media found**
              
              No movies or TV shows found matching "{{ result.searched_title }}"
              
            {% elif result.action == 'connection_error' %}
              ❌ **Connection Error**
              
              Failed to connect to Overseerr: {{ result.error }}
              
            {% else %}
              **Result:** {{ result.message }}
            {% endif %}
          {% else %}
            Status check completed. Check logs for details.
          {% endif %}

# =============================================================================
# DOWNLOAD QUEUE MANAGEMENT
# =============================================================================

- alias: "Check Active Downloads - Natural Language"
  description: "Get information about currently downloading content"
  trigger:
    - platform: conversation
      command:
        - "What's downloading"
        - "Show active downloads"
        - "What's in the queue"
        - "Show download queue"
        - "What's currently downloading"
        - "Download status"
  action:
    - service: hassarr.get_active_requests
    - service: persistent_notification.create
      data:
        title: "Download Queue Status"
        message: |
          {% set result = state_attr('input_text.last_requests', 'value') %}
          {% if result %}
            {% if result.action == 'active_requests_found' %}
              **Download Queue Overview**
              
              **Total Requests:** {{ result.total_requests }}
              **Currently Processing:** {{ result.currently_processing.count }}
              
              {% if result.currently_processing.count > 0 %}
                **Active Downloads:**
                {% for request in result.currently_processing.requests %}
                
                **{{ request.title }}** ({{ request.type | title }})
                - Requested by: {{ request.requested_by }}
                - Active downloads: {{ request.active_downloads }}
                {% for download in request.download_progress %}
                - {{ download.file_title }}: {{ download.progress_percent }}% ({{ download.time_left }} remaining)
                  {% if download.episode_info %}
                    Episode: S{{ download.episode_info.season }}E{{ download.episode_info.episode }} - {{ download.episode_info.title }}
                  {% endif %}
                {% endfor %}
                {% endfor %}
              {% else %}
                No active downloads - {{ result.total_requests }} requests in queue
              {% endif %}
              
            {% elif result.action == 'no_active_requests' %}
              ✅ **Queue Empty**
              
              No active requests found - your Overseerr queue is empty
              
            {% elif result.action == 'connection_error' %}
              ❌ **Connection Error**
              
              Failed to connect to Overseerr: {{ result.error }}
              
            {% else %}
              **Result:** {{ result.message }}
            {% endif %}
          {% else %}
            Queue check completed. Check logs for details.
          {% endif %}

# =============================================================================
# MEDIA SEARCH AUTOMATIONS
# =============================================================================

- alias: "Search Media - Natural Language"
  description: "Search for movies or TV shows using natural language"
  trigger:
    - platform: conversation
      command:
        - "Search for {query}"
        - "Find {query}"
        - "Look for {query}"
        - "Search {query}"
  action:
    - service: hassarr.search_media
      data:
        query: "{{ trigger.slots.query }}"
    - service: persistent_notification.create
      data:
        title: "Media Search Results"
        message: |
          {% set result = state_attr('input_text.last_search', 'value') %}
          {% if result %}
            {% if result.action == 'search_results' %}
              **Search Results for "{{ result.query }}"**
              
              Found {{ result.total_results }} results:
              
              {% for item in result.results[:5] %}
              **{{ loop.index }}.** {{ item.title if item.title else item.name }} ({{ item.mediaType | title }})
              - Year: {{ item.releaseDate[:4] if item.releaseDate else item.firstAirDate[:4] if item.firstAirDate else 'Unknown' }}
              - Rating: ⭐ {{ item.voteAverage | default(0) }}/10
              - TMDB ID: {{ item.id }}
              {% endfor %}
              
              {% if result.total_results > 5 %}
                ... and {{ result.total_results - 5 }} more results
              {% endif %}
              
            {% elif result.action == 'not_found' %}
              ❌ **No Results Found**
              
              No movies or TV shows found matching "{{ result.searched_query }}"
              
            {% elif result.action == 'connection_error' %}
              ❌ **Connection Error**
              
              Failed to connect to Overseerr: {{ result.error }}
              
            {% else %}
              **Result:** {{ result.message }}
            {% endif %}
          {% else %}
            Search completed. Check logs for details.
          {% endif %}

# =============================================================================
# MEDIA REMOVAL AUTOMATIONS
# =============================================================================

- alias: "Remove Media - Natural Language"
  description: "Remove media from Overseerr using natural language"
  trigger:
    - platform: conversation
      command:
        - "Remove media {media_id}"
        - "Delete media {media_id}"
        - "Remove {media_id} from overseerr"
        - "Cancel {media_id}"
  action:
    - service: hassarr.remove_media
      data:
        media_id: "{{ trigger.slots.media_id }}"
    - service: persistent_notification.create
      data:
        title: "Media Removal"
        message: |
          {% set result = state_attr('input_text.last_removal', 'value') %}
          {% if result %}
            {% if result.action == 'media_removed' %}
              ✅ **Media Removed Successfully**
              
              Media ID {{ result.media_id }} has been successfully removed from Overseerr
              
            {% elif result.action == 'removal_failed' %}
              ❌ **Removal Failed**
              
              Could not remove media ID {{ result.media_id }}
              Error: {{ result.error }}
              
            {% elif result.action == 'missing_media_id' %}
              ❌ **Missing Media ID**
              
              Please provide a media ID to remove
              
            {% elif result.action == 'connection_error' %}
              ❌ **Connection Error**
              
              Failed to connect to Overseerr: {{ result.error }}
              
            {% else %}
              **Result:** {{ result.message }}
            {% endif %}
          {% else %}
            Removal completed. Check logs for details.
          {% endif %}

# =============================================================================
# COMPREHENSIVE MEDIA MANAGEMENT
# =============================================================================

- alias: "Smart Media Assistant - Comprehensive"
  description: "Comprehensive media management with multiple commands"
  trigger:
    - platform: conversation
      command:
        # Status commands
        - "What's the status of {title}"
        - "Check {title}"
        - "Is {title} downloading"
        
        # Queue commands
        - "What's downloading"
        - "Show queue"
        - "Download status"
        
        # Search commands
        - "Search for {query}"
        - "Find {query}"
        
        # Removal commands
        - "Remove {media_id}"
        - "Delete {media_id}"
  action:
    - choose:
        # Status check
        - conditions:
            - condition: template
              value_template: "{{ 'status' in trigger.slots and trigger.slots.status is defined }}"
          sequence:
            - service: hassarr.check_media_status
              data:
                title: "{{ trigger.slots.title }}"
            - service: persistent_notification.create
              data:
                title: "Media Status"
                message: |
                  {% set result = state_attr('input_text.last_status_check', 'value') %}
                  {% if result and result.action == 'found_media' %}
                    **{{ result.primary_result.search_info.title }}**
                    Status: {{ result.primary_result.search_info.status_text }}
                    {% if result.primary_result.search_info.download_info %}
                      Downloading: {{ result.primary_result.search_info.download_info.current_download.time_left }} remaining
                    {% endif %}
                  {% else %}
                    Status check completed
                  {% endif %}
        
        # Queue check
        - conditions:
            - condition: template
              value_template: "{{ 'queue' in trigger.slots or 'downloading' in trigger.slots }}"
          sequence:
            - service: hassarr.get_active_requests
            - service: persistent_notification.create
              data:
                title: "Download Queue"
                message: |
                  {% set result = state_attr('input_text.last_requests', 'value') %}
                  {% if result and result.action == 'active_requests_found' %}
                    {{ result.currently_processing.count }} active downloads
                  {% else %}
                    Queue check completed
                  {% endif %}
        
        # Search
        - conditions:
            - condition: template
              value_template: "{{ 'query' in trigger.slots and trigger.slots.query is defined }}"
          sequence:
            - service: hassarr.search_media
              data:
                query: "{{ trigger.slots.query }}"
            - service: persistent_notification.create
              data:
                title: "Search Results"
                message: |
                  {% set result = state_attr('input_text.last_search', 'value') %}
                  {% if result and result.action == 'search_results' %}
                    Found {{ result.total_results }} results for "{{ result.query }}"
                  {% else %}
                    Search completed
                  {% endif %}
        
        # Removal
        - conditions:
            - condition: template
              value_template: "{{ 'media_id' in trigger.slots and trigger.slots.media_id is defined }}"
          sequence:
            - service: hassarr.remove_media
              data:
                media_id: "{{ trigger.slots.media_id }}"
            - service: persistent_notification.create
              data:
                title: "Media Removal"
                message: |
                  {% set result = state_attr('input_text.last_removal', 'value') %}
                  {% if result and result.action == 'media_removed' %}
                    Media {{ result.media_id }} removed successfully
                  {% else %}
                    Removal completed
                  {% endif %}

# =============================================================================
# ADVANCED INTEGRATION EXAMPLES
# =============================================================================

- alias: "Media Status Dashboard Update"
  description: "Update dashboard entities with media status information"
  trigger:
    - platform: conversation
      command:
        - "Update dashboard"
        - "Refresh status"
        - "Update media status"
  action:
    - service: hassarr.get_active_requests
    - service: input_text.set_value
      data:
        entity_id: input_text.dashboard_status
        value: |
          {% set result = state_attr('input_text.last_requests', 'value') %}
          {% if result and result.action == 'active_requests_found' %}
            Active Downloads: {{ result.currently_processing.count }}
            Total Requests: {{ result.total_requests }}
          {% else %}
            No active downloads
          {% endif %}

- alias: "Media Library Health Check"
  description: "Comprehensive health check of media library"
  trigger:
    - platform: conversation
      command:
        - "Health check"
        - "Library status"
        - "System status"
  action:
    - service: hassarr.get_active_requests
    - delay:
        seconds: 2
    - service: persistent_notification.create
      data:
        title: "Media Library Health Check"
        message: |
          {% set result = state_attr('input_text.last_requests', 'value') %}
          **Media Library Status Report**
          
          {% if result and result.action == 'active_requests_found' %}
            ✅ **System Status:** Online
            📊 **Queue Status:** {{ result.currently_processing.count }} active downloads
            📋 **Total Requests:** {{ result.total_requests }}
            
            {% if result.currently_processing.count > 0 %}
              **Active Downloads:**
              {% for request in result.currently_processing.requests %}
              - {{ request.title }} ({{ request.type | title }})
                Progress: {% for download in request.download_progress %}{{ download.progress_percent }}%{% endfor %}
              {% endfor %}
            {% endif %}
          {% else %}
            ⚠️ **System Status:** Check connection
            📊 **Queue Status:** Unable to retrieve
          {% endif %}

# =============================================================================
# CONDITIONAL LOGIC EXAMPLES
# =============================================================================

- alias: "Smart Download Monitor"
  description: "Monitor downloads and provide smart notifications"
  trigger:
    - platform: time_pattern
      minutes: "/5"  # Every 5 minutes
  condition:
    - condition: template
      value_template: "{{ states('input_text.last_requests') != 'unavailable' }}"
  action:
    - service: hassarr.get_active_requests
    - service: persistent_notification.create
      data:
        title: "Download Monitor"
        message: |
          {% set result = state_attr('input_text.last_requests', 'value') %}
          {% if result and result.action == 'active_requests_found' and result.currently_processing.count > 0 %}
            🔄 **Active Downloads:** {{ result.currently_processing.count }}
            
            {% for request in result.currently_processing.requests %}
            **{{ request.title }}**
            {% for download in request.download_progress %}
            - {{ download.progress_percent }}% complete ({{ download.time_left }} remaining)
            {% endfor %}
            {% endfor %}
          {% else %}
            ✅ **No active downloads**
          {% endif %}

# =============================================================================
# ERROR HANDLING EXAMPLES
# =============================================================================

- alias: "Connection Error Handler"
  description: "Handle connection errors gracefully"
  trigger:
    - platform: conversation
      command:
        - "Test connection"
        - "Check overseerr"
  action:
    - service: hassarr.get_active_requests
    - service: persistent_notification.create
      data:
        title: "Connection Test"
        message: |
          {% set result = state_attr('input_text.last_requests', 'value') %}
          {% if result %}
            {% if result.action == 'connection_error' %}
              ❌ **Connection Failed**
              
              Error: {{ result.error }}
              Status Code: {{ result.status_code }}
              
              **Troubleshooting:**
              1. Check Overseerr server status
              2. Verify URL and API key in configuration
              3. Check network connectivity
              4. Restart Home Assistant if needed
            {% else %}
              ✅ **Connection Successful**
              
              Overseerr is responding correctly
            {% endif %}
          {% else %}
            ⚠️ **Connection Test Incomplete**
            
            Check logs for details
          {% endif %} 